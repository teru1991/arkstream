name: Docker Build & Push

on:
  push:
    tags:
      - "v*.*.*"  # „Éê„Éº„Ç∏„Éß„É≥„Çø„Ç∞„Åß„Éà„É™„Ç¨„Éº

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üì• Install Vault CLI
        run: |
          curl -fsSL https://releases.hashicorp.com/vault/1.15.2/vault_1.15.2_linux_amd64.zip -o vault.zip
          mkdir -p vault-bin
          unzip -o vault.zip -d vault-bin
          sudo mv vault-bin/vault /usr/local/bin/
          vault --version

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version tag
        id: extract_tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: üîê Load Vault secrets for build
        env:
          VAULT_ADDR: ${{ secrets.ARKSTREAM_VAULT_ADDR }}
          VAULT_TOKEN: ${{ secrets.ARKSTREAM_VAULT_TOKEN }}
        run: |
          echo "üîê Reading secrets from Vault..."
          export POSTGRES_PASSWORD=$(vault kv get -field=POSTGRES_PASSWORD secret/arkstream/testenv)
          export MONGO_URI=$(vault kv get -field=MONGO_URI secret/arkstream/testenv)
          export KAFKA_BROKER=$(vault kv get -field=KAFKA_BROKER secret/arkstream/testenv)
          echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> $GITHUB_ENV
          echo "MONGO_URI=$MONGO_URI" >> $GITHUB_ENV
          echo "KAFKA_BROKER=$KAFKA_BROKER" >> $GITHUB_ENV

      - name: üê≥ Build and push Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}
          docker build \
            --build-arg POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
            --build-arg MONGO_URI=$MONGO_URI \
            --build-arg KAFKA_BROKER=$KAFKA_BROKER \
            -t $IMAGE_NAME:latest -t $IMAGE_NAME:$VERSION .
          docker push $IMAGE_NAME:$VERSION
          docker push $IMAGE_NAME:latest
